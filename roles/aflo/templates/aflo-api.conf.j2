[DEFAULT]
# Show more verbose log output (sets INFO log level output)
#verbose = False

# Show debugging output in logs (sets DEBUG log level output)
#debug = False

# Address to bind the API server
bind_host = 0.0.0.0

# Port the bind the API server to
bind_port = 9294

# Log to this file. Make sure you do not set the same log file for both the API
#
# If `log_file` is omitted and `use_syslog` is false, then log messages are
# sent to stdout as a fallback.
log_file = /var/log/aflo/api.log

# Backlog requests when creating socket
backlog = 4096

# TCP_KEEPIDLE value in seconds when creating socket.
# Not supported on OS X.
#tcp_keepidle = 600

# API to use for accessing data. Default value points to sqlalchemy
# data_api = aflo.db.sqlalchemy.api

# The number of child process workers that will be
# created to service API requests. The default will be
# equal to the number of CPUs available. (integer value)
#workers = 4

# Maximum line size of message headers to be accepted.
# max_header_line may need to be increased when using large tokens
# (typically those generated by the Keystone v3 API with big service
# catalogs)
# max_header_line = 16384

# Role used to identify an authenticated user as administrator
#admin_role = admin

# Allow access to version 1 of aflo api
#enable_v1_api = True

# Public url to use for versions endpoint. The default is None,
# which will use the request's host_url attribute to populate the URL base.
# If Aflo is operating behind a proxy, you will want to change this to
# represent the proxy's URL.
#public_endpoint=<None>

# http_keepalive option. If False, server will return the header
# "Connection: close", If True, server will return "Connection: Keep-Alive"
# in its responses. In order to close the client socket connection
# explicitly after the response is sent and read successfully by the client,
# you simply have to set this option to False when you create a wsgi server.
#http_keepalive = True

# ================= Aflo Expansion Filter Options ============================
# You can implement a custom filter class in order to filter ticket template by any condition you want.
# It is necessary for the filtering class to extend "TicketTemplateExpansionFilterBase".
# When you appoint plural filtering classes, Write it in comma separated value.
ticket_template_expansion_filters = aflo.tickettemplates.expansion_filters.valid_catalog_expansion_filter.ValidCatalogExpansionFilter,aflo.tickettemplates.expansion_filters.valid_role_expansion_filter.ValidRoleExpansionFilter

# It will specify the ticket type to be expansion filter.
target_ticket_type = New Contract

# ================= Syslog Options ============================

# Send logs to syslog (/dev/log) instead of to file specified
# by `log_file`
#use_syslog = False

# Facility to use. If unset defaults to LOG_USER.
#syslog_log_facility = LOG_LOCAL0

# ================= SSL Options ===============================

# Certificate file to use when starting API server securely
#cert_file = /path/to/certfile

# Private key file to use when starting API server securely
#key_file = /path/to/keyfile

# CA certificate file to use to verify connecting clients
#ca_file = /path/to/cafile

# ================= Security Options ==========================

# Digest algorithm which will be used for digital signature, the default is
# sha1 in Kilo for a smooth upgrade process, and it will be updated with
# sha256 in next release(L). Use command
# "openssl list-message-digest-algorithms" to get the available algorithms
# supported by the version of OpenSSL on the platform. Examples are 'sha1',
# 'sha256', 'sha512', etc.
#digest_algorithm = sha1

# ============ RPC Options =====================

# The number of child process workers that will be
# created to RPCservices. The default is 1.
rpc_workers = 4

# Driver or drivers to handle sending notifications. Set to
# 'messaging' to send notifications to a message queue.
# notification_driver = noop

# List of disabled notifications. A notification can be given either as a
# notification type to disable a single event, or as a notification group
# prefix to disable all events within a group.
# disabled_notifications = []

# Messaging driver used for 'messaging' driver
# rpc_backend = 'rabbit'

# Configuration options if sending messag via rabbitmq (these are
# the defaults)
{% set rabbit_hosts = [] %}
{% for node in rabbitmq.nodes %}
{%   set _ = rabbit_hosts.append(node.name + ':' + node.port|string ) %}
{% endfor %}
rabbit_hosts = "{{ rabbit_hosts | join(',') }}"
rabbit_ha_queues = true
rabbit_use_ssl = false
rabbit_userid = {{ rabbitmq.user.name }}
rabbit_password = {{ rabbitmq.user.pass }}
rabbit_virtual_host = /
rabbit_notification_exchange = {{ rabbitmq.notification_exchange }}
rabbit_notification_topic = notifications
rabbit_durable_queues = False

# Configuration options if sending messag via Qpid (these are
# the defaults)
qpid_notification_exchange = aflo
qpid_notification_topic = notifications
qpid_hostname = localhost
qpid_port = 5672
qpid_username =
qpid_password =
qpid_sasl_mechanisms =
qpid_reconnect_timeout = 0
qpid_reconnect_limit = 0
qpid_reconnect_interval_min = 0
qpid_reconnect_interval_max = 0
qpid_reconnect_interval = 0
qpid_heartbeat = 5
# Set to 'ssl' to enable SSL
qpid_protocol = tcp
qpid_tcp_nodelay = True

# =============== Policy Options ==================================

[oslo_policy]
# The JSON file that defines policies.
# Deprecated group/name - [DEFAULT]/policy_file
#policy_file = policy.json

# Default rule. Enforced when a requested rule is not found.
# Deprecated group/name - [DEFAULT]/policy_default_rule
#policy_default_rule = default

# Directories where policy configuration files are stored.
# They can be relative to any directory in the search path
# defined by the config_dir option, or absolute paths.
# The file defined by policy_file must exist for these
# directories to be searched.
# Deprecated group/name - [DEFAULT]/policy_dirs
#policy_dirs = policy.d

# =============== Database Options =================================

[database]
# The file name to use with SQLite (string value)
#sqlite_db = oslo.sqlite

# If True, SQLite uses synchronous mode (boolean value)
#sqlite_synchronous = True

# The backend to use for db (string value)
# Deprecated group/name - [DEFAULT]/db_backend
#backend = sqlalchemy

# The SQLAlchemy connection string used to connect to the
# database (string value)
# Deprecated group/name - [DEFAULT]/sql_connection
# Deprecated group/name - [DATABASE]/sql_connection
# Deprecated group/name - [sql]/connection
#connection = <None>
connection = mysql://{{ aflo_db.db.user }}:{{ aflo_db.db.password }}@{{ aflo_db.host.host }}/{{ aflo_db.db.name }}?charset=utf8

# The SQL mode to be used for MySQL sessions. This option,
# including the default, overrides any server-set SQL mode. To
# use whatever SQL mode is set by the server configuration,
# set this to no value. Example: mysql_sql_mode= (string
# value)
#mysql_sql_mode = TRADITIONAL

# Timeout before idle sql connections are reaped (integer
# value)
# Deprecated group/name - [DEFAULT]/sql_idle_timeout
# Deprecated group/name - [DATABASE]/sql_idle_timeout
# Deprecated group/name - [sql]/idle_timeout
#idle_timeout = 3600

# Minimum number of SQL connections to keep open in a pool
# (integer value)
# Deprecated group/name - [DEFAULT]/sql_min_pool_size
# Deprecated group/name - [DATABASE]/sql_min_pool_size
#min_pool_size = 1

# Maximum number of SQL connections to keep open in a pool
# (integer value)
# Deprecated group/name - [DEFAULT]/sql_max_pool_size
# Deprecated group/name - [DATABASE]/sql_max_pool_size
#max_pool_size = <None>

# Maximum db connection retries during startup. (setting -1
# implies an infinite retry count) (integer value)
# Deprecated group/name - [DEFAULT]/sql_max_retries
# Deprecated group/name - [DATABASE]/sql_max_retries
#max_retries = 10

# Interval between retries of opening a sql connection
# (integer value)
# Deprecated group/name - [DEFAULT]/sql_retry_interval
# Deprecated group/name - [DATABASE]/reconnect_interval
#retry_interval = 10

# If set, use this value for max_overflow with sqlalchemy
# (integer value)
# Deprecated group/name - [DEFAULT]/sql_max_overflow
# Deprecated group/name - [DATABASE]/sqlalchemy_max_overflow
#max_overflow = <None>

# Verbosity of SQL debugging information. 0=None,
# 100=Everything (integer value)
# Deprecated group/name - [DEFAULT]/sql_connection_debug
#connection_debug = 0

# Add python stack traces to SQL as comment strings (boolean
# value)
# Deprecated group/name - [DEFAULT]/sql_connection_trace
#connection_trace = False

# If set, use this value for pool_timeout with sqlalchemy
# (integer value)
# Deprecated group/name - [DATABASE]/sqlalchemy_pool_timeout
#pool_timeout = <None>

# Enable the experimental use of database reconnect on
# connection lost (boolean value)
#use_db_reconnect = False

# seconds between db connection retries (integer value)
#db_retry_interval = 1

# Whether to increase interval between db connection retries,
# up to db_max_retry_interval (boolean value)
#db_inc_retry_interval = True

# max seconds between db connection retries, if
# db_inc_retry_interval is enabled (integer value)
#db_max_retry_interval = 10

# maximum db connection retries before error is raised.
# (setting -1 implies an infinite retry count) (integer value)
#db_max_retries = 20

[oslo_concurrency]
# Enables or disables inter-process locks. (boolean value)
# Deprecated group/name - [DEFAULT]/disable_process_locking
#disable_process_locking = false

# Directory to use for lock files.  For security, the specified
# directory should only be writable by the user running the processes
# that need locking. It could be read from environment variable
# OSLO_LOCK_PATH.
#lock_path = /tmp

[keystone_authtoken]
identity_uri = {{ keystone.identity_uri }}
admin_tenant_name = {{ keystone.admin.tenant_name }}
admin_user = {{ keystone.admin.user_name }}
admin_password = {{ keystone.admin.password }}
revocation_cache_time = 10

[keystone_client]
username = {{ keystone.admin.user_name }}
password = {{ keystone.admin.password }}
tenant_id = {{ keystone.admin.tenant_id }}
tenant_name = {{ keystone.admin.tenant_name }}
region_name = {{ keystone.admin.region_name }}
auth_version = {{ keystone.api_version }}
auth_url = {{ keystone.auth_url }}
user_domain_id = {{ keystone.admin.user_domain_id }}
project_domain_id = {{ keystone.admin.project_domain_id }}

[nova_client]
username = {{ keystone.admin.user_name }}
api_key = {{ keystone.admin.password }}
project_id = {{ keystone.admin.tenant_name }}
region_name = {{ keystone.admin.region_name }}
# Keystone is the key to be used only in v3.
user_domain_id = {{ keystone.admin.user_domain_id }}
project_domain_id = {{ keystone.admin.project_domain_id }}

[cinder_client]
username = {{ keystone.admin.user_name }}
api_key = {{ keystone.admin.password }}
project_id = {{ keystone.admin.tenant_name }}
region_name = {{ keystone.admin.region_name }}
# Keystone is the key to be used only in v3.
user_domain_id = {{ keystone.admin.user_domain_id }}
project_domain_id = {{ keystone.admin.project_domain_id }}

[paste_deploy]
# Name of the paste configuration file that defines the available pipelines
#config_file = aflo-api-paste.ini

# Partial name of a pipeline in your paste configuration file with the
# service name removed. Your paste section name is [pipeline:aflo-api-keystone].
# Aflo use this the keystone flavor for workflow data entry.
# And in workflow, that validate user roles.
flavor=keystone

[profiler]
# If False fully disable profiling feature.
#enabled = False

# If False doesn't trace SQL requests.
#trace_sqlalchemy = False

[mail]
encode={{ mail.encode }}
from_address={{ mail.from_address }}
smtp_server={{ mail.smtp_server }}
user={{ mail.user }}
password={{ mail.password }}

[announcement]
# Supported Drupal version is 7.43.
announcement_url = {{ announcement.announcement_url }}
login_url = /drupal/?q=rest/user/login
create_contents_url = /drupal/?q=rest/node
logout_url = /drupal/?q=rest/user/logout
get_taxonomy_vocabulary_url = /drupal/?q=rest/taxonomy_vocabulary/retrieveByMachineName
get_taxonomy_term_url = /drupal/?q=rest/taxonomy_vocabulary/getTree
username = {{ keystone.admin.user_name }}
password = {{ keystone.admin.password }}
content_type = application/json
# SSL authentication occurs when to True.
ssl_verify = False

[quotas]
# Describe the key and the upper limit of the quota
# at the time of pay-per-use contract.
# Add the element here is if you want to add a quota item.
# Also performs modification of config.py.
pay_for_use_contract_quota_value = cores:99999,ram:99999999,gigabytes:99999

[ost_contract]
# Object Storage role of use.Set approve multi roles.
# example-single: T__DC1__ObjectStore,
# example-multi:  T__DC1__ObjectStore,Other_Role,
ost_roles = {{ ost_contract.ost_roles }}
